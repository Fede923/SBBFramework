# This file has a sample configuration for a very quick training of tictactoe players
{
    "task": "reinforcement", 

    "classification_parameters": { # only used if "task" is "classification"
        "dataset": "iris", # must have a .train and a .test file
        "working_path": "SBB/datasets/"
    },

    "reinforcement_parameters": { # only used if "task" is "reinforcement"
        "environment": "tictactoe",
        "validation_population": 20, # at a validated generation, all the teams with be tested against this population, the best one is the champion
        "champion_population": 40, # at a validated generation, these are the points the champion team will play against to obtain the metrics
        "hall_of_fame": {
            "max_opponents_per_generation": 2,
            "use_as_opponents": false, 
            "diversity": "genotype", # if None, use the fitness as the criteria to remove teams when the Hall of Fame is full
            "wait_generations": 100, # TODO: tirar?
            "enabled": false, 
            "size": 20
        }, 
        
        "poker": { # TODO: integrar com o tictactoe
            "opponents": "",# TODO: [PokerLooseAgressiveOpponent, PokerLoosePassiveOpponent, PokerTightAgressiveOpponent, PokerTightPassiveOpponent], # PokerBayesianOpponent, PokerBayesianOpponent, PokerBayesianOpponent, PokerBayesianOpponent], #[PokerLooseAgressiveOpponent],
            "river_round_only": false,
            "river_only_to_fullgame": false, # changed from one to another in half the generations, ignores "river_round_only"
            "maximum_bets": 4
        },

        "sockets_parameters": { # only used if "environment" is "sockets"
            "host": "localhost",
            "port": 7800,
            "timeout": 120,
            "buffer": 5000
        }
    },

    "training_parameters": {
        "runs_total": 1,
        "generations_total": 20, 
        "validate_after_each_generation": 20,
        "populations": {
            "points": 10, 
            "teams": 10
        }, 
        "team_size": {
            "max": 9, 
            "min": 2 # the min size is the total number of actions
        }, 
        "program_size": {
            "max": 20, 
            "min": 2
        }, 
        "mutation": {
            "program": {
                "change_action": 0.1, 
                "change_instruction": 1.0, 
                "add_instruction": 0.5, 
                "swap_instructions": 1.0, 
                "remove_instruction": 0.5
            }, 
            "team": {
                "add_program": 0.7, 
                "mutate_program": 0.2, 
                "remove_program": 0.7
            }
        }, 
        "replacement_rate": {
            "points": 0.2, 
            "teams": 0.5
        }
    }, 
    
    "advanced_training_parameters": {
        "use_operations": [
            "+", "-", "*", "/", 
            "ln", "exp", "cos", 
            "if_lesser_than", 
            "if_equal_or_higher_than"
        ], 
        "extra_registers": 4, 
        "seed": 1, # use None for a random seed
        "diversity": {
            "k": 10, 
            "use_novelty_archive": false, 
            "only_novelty": false, 
            "use_and_show": [ # will be applied to fitness and show in the outputs
                "genotype"
            ], 
            "only_show": [] # will be only show in the outputs
        }, 
        "use_weighted_probability_selection": false, # if False, uniform probability will be used
        "use_agressive_mutations": true, 
        "second_layer": {
            "path": "actions_reference/baseline/run[run_id]/second_layer_files/hall_of_fame+top10_overall_subcats/actions.json", 
            "enabled": false
        }, 
        "use_pareto_for_point_population_selection": false, # if False, will select points using uniform probability
        "run_initialization_step2": false
    },

    "debug": {
        "enabled": false,
        "output_path": "logs/"
    }
}