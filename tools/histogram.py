"""
Bar chart demo with pairs of bars grouped for easy comparison.
"""
import numpy as np
import matplotlib.pyplot as plt

no_diversity = {
    'ind': [623.22916,667.0,668.32291,605.82291,668.48958,697.26041,655.0,689.49999,646.42708,686.98958,681.91666,669.14583,603.75,603.75,667.35416,603.75,664.41666,694.98958,660.38541,699.82291,603.75,675.8125,659.83333,604.4375,677.46875],
    'cumu': [667.84374,930.27083,796.38541,611.08333,668.48958,833.90625,655.0,823.57291,669.65624,860.82291,818.02083,688.01041,603.75,603.75,776.29166,603.75,731.22916,696.44791,707.67708,699.82291,603.75,733.75,673.72916,604.4375,708.48958],
    'label': 'no_div'
}

bid_div = {
    'ind': [639.90624,635.35416,686.23958,687.60416,694.37499,699.17708,637.28124,688.10416,676.57291,660.14583,699.98958,687.22916,672.95833,655.0,679.89583,603.75,696.91666,690.69791,650.61458,681.15625,656.78125,685.96874,664.54166,674.58333],
    'cumu': [674.96874,675.96874,935.63541,938.22916,870.30208,699.17708,641.55208,755.73958,763.66666,935.31249,725.80208,838.0625,707.34374,935.31249,895.18749,603.75,804.29166,938.35416,655.17708,712.44791,788.82291,744.85416,754.33333,876.78125,884.58333],
    'label': 'bid'
}

ncd_and_gen = {
    'ind': [675.09374,684.27083,679.93749,697.82291,692.22916,695.66666,694.69791,699.82291,666.85416,681.95833,687.63541,699.32291,659.99999,701.61458,687.19791,685.45833,690.875,694.71874,666.52083,677.40625,699.80208,675.35416,683.97916,684.83333,664.33333],
    'cumu': [963.625,938.35416,938.35416,938.19791,938.35416,938.10416,938.35416,938.35416,938.35416,938.35416,938.27083,938.26041,938.35416,938.33333,938.35416,938.35416,938.35416,938.35416,938.35416,937.86458,938.35416,938.35416,938.35416,938.35416,938.35416],
    'label': 'ncd_and_gen'
}

ham_and_gen = {
    'ind': [698.16666,690.33333,681.85416,691.38541,684.96874,679.26041,698.11458,692.38541,671.94791,682.62499,701.38541,696.09374,682.19791,698.79166,687.04166,689.40625,687.65624,685.31249,683.93749,688.4375,686.27083,692.48958,686.46875,678.0625,660.12499],
    'cumu': [948.84375, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 922.9375, 937.33333, 938.35416, 938.35416, 938.35416, 938.35416],
    'label': 'ham_and_gen'
}

gen = {
    'ind': [699.65625,699.19791,687.11458,699.73958,693.51041,701.15624,667.70833,688.04166,682.45833,674.125,697.16666,698.40624,700.03124,666.79166,655.0,655.0,696.28125,692.95833,698.88541,655.9375,675.875,686.78124,693.61458,695.86458,689.27083],
    'cumu': [961.98958,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416,938.35416],
    'label': 'gen'
}

ham = {
    'ind': [695.47916,688.15625,688.5,671.1875,664.2083,674.71875,679.60416,697.58333,696.58333,665.28125,675.20833,693.16666,662.37499,688.55208,680.61458,688.96875,655.0,668.04166,668.02083,695.32291,657.79166,674.43749,669.6875,695.13541,692.64583],
    'cumu': [938.42708, 938.35416, 938.35416, 938.35416, 938.35416, 938.35416, 938.33333, 938.35416, 937.70833, 938.35416, 938.35416, 938.35416, 908.14583, 938.35416, 936.32291, 938.35416, 938.35416, 937.84375, 938.35416, 938.35416, 922.32291, 936.79166, 938.35416, 936.58333, 938.35416],
    'label': 'ham'
}

ncd = {
    'ind': [643.45833,632.11458,643.36458,632.26041,634.94791,631.14583,641.70833,634.02083,648.89583,622.31249,626.92708,625.38541,629.14583,633.24999,633.29166,635.58333,633.09374,633.18749,638.52083,633.15624,644.99999,632.87499,628.41666,630.72916,629.89583],
    'cumu': [756.33333, 757.48958, 754.89583, 755.45833, 756.97916, 756.4375, 757.14583, 756.02083, 757.47916, 755.26041, 755.20833, 758.0, 756.35416, 757.41666, 756.03125, 755.72916, 755.29166, 757.22916, 758.05208, 756.52083, 756.72916, 754.75, 754.04166, 758.05208, 754.69791],
    'label': 'ncd'
}

only_nov = {
    'ind': [595.45833,599.88541,586.20833,606.8125,613.13541,585.52083,601.82291,602.58333,589.97916,597.60416,601.48958,611.55208,587.81249,616.66666,607.59375,610.35416,593.58333,624.13541,592.23958,620.73958,586.5,608.29166,605.10416,587.95833,582.77083],
    'cumu': [749.0, 754.72916, 756.25, 755.55208, 756.98958, 756.86458, 754.98958, 755.875, 756.42708, 757.86458, 755.625, 756.42708, 755.97916, 757.625, 757.10416, 756.0625, 752.39583, 756.72916, 752.80208, 757.39583, 754.94791, 754.45833, 755.98958, 756.3125, 754.08333],
    'label': 'only_nov'
}

nov = {
    'ind': [636.15624,636.08333,635.03124,633.56249,630.34374,642.71874,635.42708,641.18749,632.30208,641.95833,639.21874,630.77083,634.73958,631.99999,632.51041,630.57291,641.26041,628.10416,631.65624,634.66666,634.43749,637.81249,638.39583,638.87499,633.77083],
    'cumu': [758.70833, 758.875, 758.875, 758.04166, 758.33333, 756.59375, 757.27083, 758.54166, 757.40625, 758.875, 758.49999, 758.625, 753.37499, 757.44791, 758.73958, 758.70833, 758.83333, 757.62499, 757.80208, 758.55208, 757.33333, 758.60416, 758.70833, 758.375, 758.40625],
    'label': 'nov'
}


groups = (no_diversity['label'], nov['label'], only_nov['label'], ncd['label'], bid_div['label'], ncd_and_gen['label'], ham['label'], ham_and_gen['label'], gen['label'])
n_groups = len(groups)

means_ind = (np.mean(no_diversity['ind']), np.mean(nov['ind']), np.mean(only_nov['ind']), np.mean(ncd['ind']), np.mean(bid_div['ind']), np.mean(ncd_and_gen['ind']), np.mean(ham['ind']), np.mean(ham_and_gen['ind']), np.mean(gen['ind']))
std_ind = (np.std(no_diversity['ind']), np.std(nov['ind']), np.std(only_nov['ind']), np.std(ncd['ind']), np.std(bid_div['ind']), np.std(ncd_and_gen['ind']), np.std(ham['ind']), np.std(ham_and_gen['ind']), np.std(gen['ind']))

means_cumu = (np.mean(no_diversity['cumu']), np.mean(nov['cumu']), np.mean(only_nov['cumu']), np.mean(ncd['cumu']), np.mean(bid_div['cumu']), np.mean(ncd_and_gen['cumu']), np.mean(ham['cumu']), np.mean(ham_and_gen['cumu']), np.mean(gen['cumu']))
std_cumu = (np.std(no_diversity['cumu']), np.std(nov['cumu']), np.std(only_nov['cumu']), np.std(ncd['cumu']), np.std(bid_div['cumu']), np.std(ncd_and_gen['cumu']), np.std(ham['cumu']), np.std(ham_and_gen['cumu']), np.std(gen['cumu']))

fig, ax = plt.subplots()

index = np.arange(n_groups)
bar_width = 0.35

opacity = 0.8
error_config = {'ecolor': '0.3'}

rects1 = plt.bar(index, means_ind, bar_width,
                 alpha=opacity,
                 color='b',
                 yerr=std_ind,
                 error_kw=error_config,
                 label='Best Individual Score')

rects2 = plt.bar(index + bar_width, means_cumu, bar_width,
                 alpha=opacity,
                 color='g',
                 yerr=std_cumu,
                 error_kw=error_config,
                 label='Cumulative Score')

plt.xlabel('configuration')
plt.ylabel('scores')
# plt.title('Scores by group and gender')
TOTAL_POINTS = 1260
DRAW_LINE = TOTAL_POINTS/2.0
plt.axis([0, n_groups, TOTAL_POINTS*0.2, TOTAL_POINTS*0.8]) # per validation
plt.grid(b=True, which='both', color='0.65',linestyle='-')
plt.xticks(index + bar_width, groups)
plt.legend()

line_height = DRAW_LINE
color = 'gray'
plt.plot([0, 700], [line_height, line_height], 'k-', lw=2, color=color) # ,linestyle='--'
# patches.append(mpatches.Patch(color=color, label='draw'))

handles, labels = ax.get_legend_handles_labels()
ax.legend(handles, labels)

plt.legend(loc=2)

plt.tight_layout()
plt.show()