Distribution of Inputs per Validation (per program) (last gen.):
mean: [136.0, 108.4, 87.6, 102.6, 87.4, 60.2, 93.6, 81.8, 66.8, 94.6, 65.59, 101.2]
std. deviation: [24.3, 23.66, 37.5, 54.81, 35.91, 25.85, 42.93, 24.04, 19.54, 42.69, 23.72, 37.59]
Distribution of Inputs per Validation (per team) (last gen.):
mean: [46.0, 44.0, 38.4, 39.6, 40.6, 34.4, 40.6, 40.79, 39.4, 42.4, 35.6, 44.2]
std. deviation: [4.42, 5.17, 11.95, 12.97, 9.0, 9.58, 10.01, 4.3, 3.97, 6.46, 6.28, 3.86]

Distribution of Inputs per Validation (per program) (last gen.):
mean: [131.6, 120.4, 120.0, 91.2, 77.0, 86.8, 91.0, 90.6, 84.8, 110.8, 114.4, 96.0]
std. deviation: [23.43, 41.17, 49.61, 25.38, 23.3, 31.22, 15.13, 42.81, 9.7, 38.67, 21.09, 22.29]
Distribution of Inputs per Validation (per team) (last gen.):
mean: [47.0, 45.4, 44.8, 42.6, 39.6, 40.2, 44.0, 41.0, 42.4, 44.2, 45.4, 43.4]
std. deviation: [2.09, 4.4, 3.81, 2.65, 5.95, 6.36, 3.84, 8.98, 2.05, 7.7, 4.75, 4.58]

Distribution of Inputs per Validation (per program) (last gen.):
mean: [120.2, 115.8, 65.59, 101.4, 76.59, 93.8, 92.8, 77.8, 69.59, 97.0, 59.0, 89.0]
std. deviation: [39.08, 27.58, 17.6, 18.28, 30.65, 36.22, 13.55, 25.19, 21.68, 24.72, 20.04, 14.76]
Distribution of Inputs per Validation (per team) (last gen.):
mean: [45.0, 45.0, 36.4, 46.4, 39.79, 42.6, 42.2, 39.6, 40.2, 44.2, 35.0, 42.0]
std. deviation: [5.72, 3.03, 5.35, 1.95, 6.07, 4.63, 3.31, 5.35, 3.96, 2.99, 8.31, 3.52]

scores1 = [[136.0, 108.4, 87.6, 102.6, 87.4, 60.2, 93.6, 81.8, 66.8, 94.6, 65.59, 101.2], [131.6, 120.4, 120.0, 91.2, 77.0, 86.8, 91.0, 90.6, 84.8, 110.8, 114.4, 96.0], [120.2, 115.8, 65.59, 101.4, 76.59, 93.8, 92.8, 77.8, 69.59, 97.0, 59.0, 89.0]]

scores2 = [[46.0, 44.0, 38.4, 39.6, 40.6, 34.4, 40.6, 40.79, 39.4, 42.4, 35.6, 44.2], [47.0, 45.4, 44.8, 42.6, 39.6, 40.2, 44.0, 41.0, 42.4, 44.2, 45.4, 43.4], [45.0, 45.0, 36.4, 46.4, 39.79, 42.6, 42.2, 39.6, 40.2, 44.2, 35.0, 42.0]]

def process(score_per_generation_per_run):
    score_means = []
    score_stds = []
    for index in range(len(score_per_generation_per_run[0])):
        column = [row[index] for row in score_per_generation_per_run]
        score_means.append(round_value(numpy.mean(column)))
        score_stds.append(round_value(numpy.std(column)))
    return score_means, score_stds

inputs: ['0: hand strength', '1: effective potential', '2: bet', '3: pot odds', '4: betting position', '5: round', '6: chips', '7: opp last action', '8: opp hand agressiveness', '9: opp agressiveness', '10: opp tight/loose', '11: opp passive/aggressive']

>>> process(scores1)
([129.26, 114.86, 91.06, 98.4, 80.33, 80.26, 92.46, 83.4, 73.73, 100.8, 79.66, 95.4],
 [6.65, 4.94, 22.34, 5.11, 5.0, 14.47, 1.08, 5.34, 7.91, 7.13, 24.7, 4.99])

>>> process(scores2)
([46.0, 44.8, 39.86, 42.86, 39.99, 39.06, 42.26, 40.46, 40.66, 43.6, 38.66, 43.2],
 [0.81, 0.58, 3.58, 2.78, 0.43, 3.44, 1.38, 0.61, 1.26, 0.84, 4.76, 0.9])