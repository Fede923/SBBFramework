
CONFIG: {'task': 'classification', 'verbose': {'show_actions_distribution_per_generation': False}, 'classification_parameters': {'use_oversampling': True, 'dataset': 'thyroid'}, 'reinforcement_parameters': {'environment': 'tictactoe'}, 'advanced_training_parameters': {'extra_registers': 1, 'diversity': {'genotype_fitness_maintanance': False, 'genotype_configs': {'p_value': 0.1, 'k': 8}, 'fitness_sharing': False}, 'use_complex_functions': True}, 'training_parameters': {'team_size': {'max': 5}, 'program_size': {'max': 30, 'initial': 10, 'min': 2}, 'populations': {'teams': 30, 'points': 120, 'programs': 60}, 'generations_total': 100, 'mutation': {'program': {'change_action': 0.1, 'change_instruction': 0.9, 'add_instruction': 0.9, 'remove_instruction': 0.8}, 'team': {'add_program': 0.8, 'remove_program': 0.7}}, 'replacement_rate': {'points': 0.2, 'teams': 0.6}, 'runs_total': 2}}

################# Overall Best:
1 Run best program: 1795:99, f: 0.675, team size: 4, team members: [('(2223:91)', 0), ('(2421:99)', 0), ('(2167:88)', 1), ('(1915:78)', 2)]
TRAIN: acc: 0.675, mrecall: 0.675
TEST: acc: 0.9119, mrecall: 0.65157, recall: [ 0.02739726  1.          0.92731278]

Algorithm info:
Class Distributions (test dataset): defaultdict(<type 'int'>, {0: 73, 1: 177, 2: 3178}), for a total of 3428 samples
total samples (train): 3772
total samples (test): 3428
total_input_registers: 21
total_classes: 3

Acc per classes: [0.0005834305717619603, 0.05163360560093349, 0.8596849474912486]
Confusion Matrix:
[[   2   71    0]
 [   0  177    0]
 [  45  186 2947]]

Test DR per run: [0.64043, 0.65157]
Test DR, mean: 0.646, std: 0.00557

recall_per_generation: [[0.945, 0.423, 0.0], [0.191, 0.813, 0.0], [0.945, 0.423, 0.0], [0.191, 0.813, 0.0], [0.191, 0.813, 0.0], [0.191, 0.813, 0.0], [0.191, 0.593, 0.28], [0.191, 0.593, 0.28], [0.191, 0.593, 0.28], [0.191, 0.593, 0.28], [0.191, 0.581, 0.297], [0.369, 0.514, 0.225], [0.191, 0.581, 0.297], [0.191, 0.581, 0.297], [0.191, 0.581, 0.297], [0.191, 0.581, 0.297], [0.191, 0.581, 0.297], [0.191, 0.581, 0.297], [0.109, 0.728, 0.394], [0.109, 0.728, 0.394], [0.328, 0.468, 0.261], [0.178, 0.593, 0.29], [0.287, 0.497, 0.273], [0.287, 0.497, 0.273], [0.287, 0.497, 0.273], [0.287, 0.497, 0.273], [0.287, 0.497, 0.273], [0.287, 0.497, 0.273], [0.287, 0.497, 0.273], [0.287, 0.497, 0.273], [0.287, 0.497, 0.26], [0.287, 0.48, 0.509], [0.287, 0.649, 0.438], [0.0, 0.932, 0.87], [0.0, 0.932, 0.87], [0.287, 0.621, 0.509], [0.287, 0.621, 0.509], [0.287, 0.621, 0.509], [0.287, 0.649, 0.449], [0.0, 0.932, 0.87], [0.931, 0.0, 0.87], [0.931, 0.0, 0.87], [0.931, 0.0, 0.87], [0.931, 0.0, 0.87], [0.931, 0.0, 0.943], [0.931, 0.0, 0.943], [0.931, 0.0, 0.943], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.932], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.027, 0.988, 0.913], [0.027, 0.988, 0.913], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.972, 0.011, 0.925], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.972, 0.011, 0.925], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.027, 1.0, 0.927], [0.027, 1.0, 0.927], [0.027, 1.0, 0.927], [0.027, 1.0, 0.927], [0.027, 1.0, 0.927], [0.027, 1.0, 0.927], [0.027, 1.0, 0.927], [0.027, 1.0, 0.927]]

avg_dr_per_generations: [0.409, 0.348, 0.432, 0.443, 0.443, 0.443, 0.453, 0.453, 0.453, 0.453, 0.454, 0.461, 0.454, 0.454, 0.454, 0.454, 0.454, 0.455, 0.526, 0.526, 0.497, 0.497, 0.497, 0.498, 0.498, 0.498, 0.498, 0.498, 0.498, 0.498, 0.496, 0.535, 0.551, 0.622, 0.622, 0.558, 0.558, 0.558, 0.553, 0.621, 0.621, 0.621, 0.621, 0.621, 0.633, 0.632, 0.632, 0.643, 0.643, 0.642, 0.642, 0.642, 0.642, 0.642, 0.642, 0.642, 0.642, 0.642, 0.642, 0.642, 0.642, 0.638, 0.638, 0.644, 0.642, 0.644, 0.644, 0.644, 0.646, 0.646, 0.646, 0.646, 0.645, 0.645, 0.643, 0.645, 0.646, 0.641, 0.641, 0.636, 0.641, 0.641, 0.638, 0.627, 0.627, 0.627, 0.627, 0.627, 0.627, 0.627, 0.628, 0.628, 0.63, 0.632, 0.647, 0.647, 0.629, 0.646, 0.646, 0.646]
Actions Distribution (last gen.): Counter({0: 42, 1: 9, 2: 9})
Finished execution, total elapsed time: 37.9937331676 secs
Elapsed times, mean: 18.9968665838, std: 1.46014845371
Code for team 1795 from generation 99, team size: 4
################

Code for program 1915 from generation 78 for action 2
Participate in the teams (29): ['(1795:99)', '(1799:99)', '(1800:99)', '(1801:99)', '(1802:99)', '(1803:99)', '(1805:99)', '(1806:99)', '(1807:99)', '(1810:99)', '(1811:99)', '(1812:99)', '(1813:100)', '(1814:100)', '(1815:100)', '(1816:100)', '(1818:100)', '(1819:100)', '(1820:100)', '(1821:100)', '(1822:100)', '(1823:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 12, total introns: 3
----------------
r[0] = r[0] + r[0]
r[1] = r[1] / r[1]
r[1] = r[1] - i[10]
r[0] = r[0] - r[1]
r[1] = r[1] / i[15]
r[0] = ln(r[0])
r[1] = cos(r[1])
r[1] = r[1] / r[0]
r[0] = ln(r[0])
r[1] = r[1] / i[13]
r[0] = r[0] * i[16]
if r[0] >= r[1]:
----------------
Total instructions (without introns): 9
----------------
r[0] = r[0] + r[0]
r[1] = r[1] / r[1]
r[1] = r[1] - i[10]
r[0] = r[0] - r[1]
r[1] = r[1] / i[15]
r[1] = r[1] / r[0]
r[1] = r[1] / i[13]
r[0] = r[0] * i[16]
if r[0] >= r[1]:
----------------

Code for program 2167 from generation 88 for action 1
Participate in the teams (25): ['(1795:99)', '(1799:99)', '(1800:99)', '(1802:99)', '(1803:99)', '(1805:99)', '(1806:99)', '(1807:99)', '(1811:99)', '(1812:99)', '(1813:100)', '(1814:100)', '(1815:100)', '(1816:100)', '(1818:100)', '(1820:100)', '(1821:100)', '(1822:100)', '(1823:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 10, total introns: 9
----------------
r[0] = ln(r[0])
r[1] = r[1] - i[7]
r[0] = r[0] - r[0]
r[1] = r[1] / r[0]
if r[1] >= r[1]:
r[0] = exp(r[0])
r[1] = r[1] * i[7]
if r[1] < r[14]:
r[1] = r[1] / r[1]
r[1] = r[1] / r[0]
----------------
Total instructions (without introns): 1
----------------
r[0] = r[0] - r[0]
----------------

Code for program 2223 from generation 91 for action 0
Participate in the teams (26): ['(1795:99)', '(1799:99)', '(1800:99)', '(1801:99)', '(1802:99)', '(1803:99)', '(1805:99)', '(1806:99)', '(1807:99)', '(1810:99)', '(1811:99)', '(1812:99)', '(1813:100)', '(1814:100)', '(1816:100)', '(1817:100)', '(1818:100)', '(1819:100)', '(1821:100)', '(1822:100)', '(1823:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1829:100)', '(1830:100)']
Total instructions: 12, total introns: 6
----------------
r[1] = ln(r[1])
r[0] = r[0] + r[0]
r[0] = r[0] + r[0]
r[0] = r[0] / i[12]
r[1] = r[1] - r[0]
r[0] = r[0] - r[1]
if r[1] >= r[15]:
r[1] = r[1] / r[0]
r[1] = ln(r[1])
if r[1] >= r[1]:
r[0] = r[0] + i[7]
r[1] = r[1] + i[6]
----------------
Total instructions (without introns): 6
----------------
r[0] = r[0] + r[0]
r[0] = r[0] + r[0]
r[0] = r[0] / i[12]
r[1] = r[1] - r[0]
r[0] = r[0] - r[1]
r[0] = r[0] + i[7]
----------------

Code for program 2421 from generation 99 for action 0
Participate in the teams (2): ['(1795:99)', '(1822:100)']
Total instructions: 13, total introns: 10
----------------
r[1] = r[1] - i[1]
r[0] = exp(r[0])
if r[1] >= r[1]:
r[0] = ln(r[0])
r[1] = exp(r[1])
r[1] = r[1] * i[7]
r[0] = cos(r[0])
r[0] = r[0] / i[17]
r[1] = ln(r[1])
r[0] = r[0] * i[7]
if r[1] >= r[1]:
r[1] = cos(r[1])
r[0] = r[0] * r[0]
----------------
Total instructions (without introns): 3
----------------
r[0] = r[0] / i[17]
r[0] = r[0] * i[7]
r[0] = r[0] * r[0]
----------------
################