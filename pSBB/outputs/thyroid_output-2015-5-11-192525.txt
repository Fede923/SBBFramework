
CONFIG: {'verbose': {'show_actions_distribution_per_generation': False}, 'initial_program_size': 10, 'total_calculation_registers': 1, 'reinforcement_parameters': {'environment': 'tictactoe'}, 'max_program_size': 30, 'advanced_training_parameters': {'diversity': {'genotype_fitness_maintanance': False, 'genotype_configs': {'p_value': 0.1, 'k': 8}, 'fitness_sharing': False}}, 'use_complex_functions': True, 'task': 'classification', 'classification_parameters': {'use_oversampling': True, 'dataset': 'thyroid'}, 'minimum_team_size': 2, 'training_parameters': {'replacement_rate': {'points': 0.2, 'teams': 0.6}, 'populations': {'teams': 30, 'points': 120, 'programs': 60}, 'generations_total': 100, 'mutation': {'program': {'change_action': 0.1, 'change_instruction': 0.9, 'add_instruction': 0.9, 'remove_instruction': 0.8}, 'team': {'add_program': 0.8, 'remove_program': 0.7}}, 'runs_total': 2}, 'max_team_size': 5, 'initial_team_size': 3, 'minimum_program_size': 5}

################# Overall Best:
1 Run best program: 1695:93, f: 0.96666, team size: 4, team members: [('(2109:85)', 0), ('(2223:90)', 1), ('(52:0)', 2), ('(2291:93)', 2)]
TRAIN: acc: 0.96666, mrecall: 0.96666
TEST: acc: 0.92094, mrecall: 0.91803, recall: [ 0.83561644  1.          0.9185022 ]

Algorithm info:
Class Distributions (test dataset): defaultdict(<type 'int'>, {0: 73, 1: 177, 2: 3178}), for a total of 3428 samples
total samples (train): 3772
total samples (test): 3428
total_input_registers: 21
total_classes: 3
total_registers: 2

Acc per classes: [0.01779463243873979, 0.05163360560093349, 0.8515169194865811]
Confusion Matrix:
[[  61   12    0]
 [   0  177    0]
 [  83  176 2919]]

Test DR per run: [0.61678, 0.91803]
Test DR, mean: 0.767405, std: 0.150625

recall_per_generation: [[1.0, 0.0, 0.932], [1.0, 0.0, 0.932], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.918], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.89, 0.983, 0.904], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 0.971, 0.911], [0.835, 0.971, 0.911], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.918], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.89, 0.983, 0.904], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.91], [0.835, 1.0, 0.918], [0.835, 1.0, 0.918], [0.835, 1.0, 0.918], [0.835, 1.0, 0.918], [0.835, 1.0, 0.918], [0.835, 1.0, 0.918]]

avg_dr_per_generations: [0.577, 0.577, 0.713, 0.732, 0.732, 0.753, 0.753, 0.755, 0.754, 0.754, 0.746, 0.753, 0.763, 0.763, 0.763, 0.763, 0.768, 0.763, 0.751, 0.745, 0.748, 0.745, 0.744, 0.758, 0.752, 0.752, 0.759, 0.769, 0.769, 0.769, 0.769, 0.767, 0.767, 0.767, 0.771, 0.767, 0.767, 0.767, 0.767, 0.767, 0.775, 0.775, 0.775, 0.773, 0.773, 0.773, 0.773, 0.773, 0.772, 0.773, 0.773, 0.773, 0.773, 0.773, 0.773, 0.772, 0.773, 0.773, 0.754, 0.769, 0.777, 0.777, 0.777, 0.777, 0.763, 0.763, 0.763, 0.763, 0.777, 0.763, 0.763, 0.759, 0.759, 0.763, 0.763, 0.763, 0.763, 0.763, 0.763, 0.764, 0.764, 0.764, 0.763, 0.764, 0.759, 0.764, 0.764, 0.766, 0.764, 0.763, 0.759, 0.764, 0.764, 0.764, 0.764, 0.767, 0.767, 0.767, 0.767, 0.767]
Actions Distribution (last gen.): Counter({0: 28, 2: 17, 1: 15})
Finished execution, total elapsed time: 39.2318820953 secs
Elapsed times, mean: 19.6159410477, std: 0.694972038269
Code for team 1695 from generation 93, team size: 4
################

Code for program 52 from generation 0 for action 2
Participate in the teams (28): ['(1695:93)', '(1727:95)', '(1738:95)', '(1773:97)', '(1774:97)', '(1789:98)', '(1795:99)', '(1796:99)', '(1803:99)', '(1804:99)', '(1811:99)', '(1812:99)', '(1813:100)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1818:100)', '(1819:100)', '(1820:100)', '(1822:100)', '(1823:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 10, total introns: 7
----------------
r[1] = r[1] / r[1]
r[1] = cos(r[1])
r[0] = cos(r[0])
if r[1] >= r[1]:
r[0] = ln(r[0])
r[0] = r[0] + i[12]
r[0] = cos(r[0])
r[0] = r[0] * i[16]
if r[0] < r[0]:
r[1] = r[1] * i[17]
----------------
Total instructions (without introns): 3
----------------
r[0] = r[0] + i[12]
r[0] = r[0] * i[16]
if r[0] < r[0]:
----------------

Code for program 2109 from generation 85 for action 0
Participate in the teams (26): ['(1695:93)', '(1727:95)', '(1738:95)', '(1773:97)', '(1789:98)', '(1795:99)', '(1796:99)', '(1803:99)', '(1804:99)', '(1811:99)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1818:100)', '(1819:100)', '(1820:100)', '(1821:100)', '(1823:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 13, total introns: 6
----------------
r[1] = ln(r[1])
r[1] = r[1] + r[1]
r[0] = r[0] / r[1]
r[1] = r[1] / i[8]
r[0] = cos(r[0])
r[0] = r[0] / i[8]
r[1] = exp(r[1])
r[0] = r[0] - r[1]
if r[1] < r[5]:
r[0] = r[0] / i[20]
r[1] = r[1] + i[17]
r[0] = r[0] + i[12]
if r[1] >= r[0]:
----------------
Total instructions (without introns): 7
----------------
r[1] = r[1] + r[1]
r[0] = r[0] / r[1]
r[1] = r[1] / i[8]
r[0] = r[0] / i[8]
r[0] = r[0] - r[1]
r[0] = r[0] / i[20]
r[0] = r[0] + i[12]
----------------

Code for program 2223 from generation 90 for action 1
Participate in the teams (15): ['(1695:93)', '(1738:95)', '(1796:99)', '(1803:99)', '(1811:99)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1819:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)']
Total instructions: 8, total introns: 4
----------------
r[0] = ln(r[0])
r[1] = r[1] / r[0]
r[1] = r[1] / i[16]
r[1] = ln(r[1])
r[1] = cos(r[1])
if r[0] < r[5]:
r[0] = r[0] / r[1]
r[0] = cos(r[0])
----------------
Total instructions (without introns): 4
----------------
r[1] = r[1] / r[0]
r[1] = r[1] / i[16]
if r[0] < r[5]:
r[0] = r[0] / r[1]
----------------

Code for program 2291 from generation 93 for action 2
Participate in the teams (14): ['(1695:93)', '(1738:95)', '(1796:99)', '(1803:99)', '(1811:99)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1819:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)']
Total instructions: 11, total introns: 5
----------------
r[1] = r[1] / r[1]
r[0] = exp(r[0])
r[0] = cos(r[0])
r[0] = ln(r[0])
if r[1] >= r[0]:
r[0] = r[0] + i[12]
if r[0] < r[13]:
r[1] = exp(r[1])
r[1] = r[1] + i[19]
r[0] = cos(r[0])
r[0] = r[0] * r[1]
----------------
Total instructions (without introns): 6
----------------
r[1] = r[1] / r[1]
if r[1] >= r[0]:
r[0] = r[0] + i[12]
if r[0] < r[13]:
r[1] = r[1] + i[19]
r[0] = r[0] * r[1]
----------------
################