
CONFIG: {'task': 'classification', 'verbose': {'show_actions_distribution_per_generation': False}, 'classification_parameters': {'use_oversampling': True, 'dataset': 'thyroid'}, 'reinforcement_parameters': {'environment': 'tictactoe'}, 'advanced_training_parameters': {'extra_registers': 1, 'diversity': {'genotype_fitness_maintanance': False, 'genotype_configs': {'p_value': 0.1, 'k': 8}, 'fitness_sharing': False}, 'use_complex_functions': True}, 'training_parameters': {'team_size': {'max': 5}, 'program_size': {'max': 30, 'initial': 10, 'min': 2}, 'populations': {'teams': 30, 'points': 120, 'programs': 60}, 'generations_total': 100, 'mutation': {'program': {'change_action': 0.1, 'change_instruction': 0.9, 'add_instruction': 0.9, 'remove_instruction': 0.8}, 'team': {'add_program': 0.8, 'remove_program': 0.7}}, 'replacement_rate': {'points': 0.2, 'teams': 0.6}, 'runs_total': 2}}

################# Overall Best:
0 Run best program: 1795:99, f: 0.73333, team size: 4, team members: [('(2281:95)', 0), ('(2349:99)', 0), ('(1897:78)', 1), ('(1747:71)', 2)]
TRAIN: acc: 0.73333, mrecall: 0.73333
TEST: acc: 0.90927, mrecall: 0.68544, recall: [ 0.15068493  0.98305085  0.92259283]

Algorithm info:
Class Distributions (test dataset): defaultdict(<type 'int'>, {0: 73, 1: 177, 2: 3178}), for a total of 3428 samples
total samples (train): 3772
total samples (test): 3428
total_input_registers: 21
total_classes: 3

Acc per classes: [0.0032088681446907816, 0.050758459743290546, 0.8553092182030338]
Confusion Matrix:
[[  11   62    0]
 [   3  174    0]
 [  59  187 2932]]

Test DR per run: [0.68544, 0.57172]
Test DR, mean: 0.62858, std: 0.05686

recall_per_generation: [[0.89, 0.0, 0.814], [0.89, 0.0, 0.814], [0.876, 0.0, 0.819], [0.89, 0.0, 0.814], [0.068, 0.903, 0.732], [0.068, 0.903, 0.732], [0.068, 0.903, 0.732], [0.068, 0.903, 0.846], [0.068, 0.903, 0.846], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [0.0, 1.0, 0.939], [1.0, 0.0, 0.939], [0.0, 1.0, 0.939], [0.15, 0.983, 0.922], [0.15, 0.983, 0.922], [0.15, 0.983, 0.922], [0.15, 0.983, 0.922], [0.15, 0.983, 0.922]]

avg_dr_per_generations: [0.456, 0.452, 0.453, 0.46, 0.46, 0.462, 0.462, 0.481, 0.481, 0.501, 0.499, 0.499, 0.499, 0.499, 0.501, 0.501, 0.501, 0.501, 0.501, 0.501, 0.495, 0.495, 0.495, 0.495, 0.495, 0.501, 0.501, 0.568, 0.568, 0.568, 0.568, 0.568, 0.568, 0.568, 0.568, 0.567, 0.567, 0.568, 0.57, 0.567, 0.566, 0.568, 0.567, 0.567, 0.582, 0.582, 0.567, 0.562, 0.567, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.57, 0.564, 0.564, 0.571, 0.571, 0.564, 0.57, 0.57, 0.567, 0.568, 0.568, 0.568, 0.568, 0.559, 0.559, 0.568, 0.567, 0.567, 0.567, 0.567, 0.568, 0.567, 0.567, 0.567, 0.563, 0.567, 0.561, 0.561, 0.561, 0.564, 0.609, 0.609, 0.609, 0.609, 0.609, 0.609, 0.609, 0.609, 0.628, 0.628, 0.628, 0.628, 0.628]
Actions Distribution (last gen.): Counter({0: 36, 1: 19, 2: 5})
Finished execution, total elapsed time: 38.1739938259 secs
Elapsed times, mean: 19.086996913, std: 2.57369697094
Code for team 1795 from generation 99, team size: 4
################

Code for program 1747 from generation 71 for action 2
Participate in the teams (30): ['(1795:99)', '(1796:99)', '(1797:99)', '(1798:99)', '(1801:99)', '(1803:99)', '(1804:99)', '(1805:99)', '(1808:99)', '(1809:99)', '(1810:99)', '(1811:99)', '(1813:100)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1818:100)', '(1819:100)', '(1820:100)', '(1821:100)', '(1822:100)', '(1823:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 11, total introns: 3
----------------
if r[1] >= r[5]:
r[0] = ln(r[0])
if r[1] < r[6]:
if r[0] >= r[6]:
if r[1] < r[1]:
r[1] = cos(r[1])
r[1] = cos(r[1])
if r[0] < r[4]:
r[0] = r[0] * i[8]
r[0] = r[0] + r[1]
r[0] = r[0] / i[17]
----------------
Total instructions (without introns): 8
----------------
if r[1] >= r[5]:
if r[1] < r[6]:
if r[0] >= r[6]:
if r[1] < r[1]:
if r[0] < r[4]:
r[0] = r[0] * i[8]
r[0] = r[0] + r[1]
r[0] = r[0] / i[17]
----------------

Code for program 1897 from generation 78 for action 1
Participate in the teams (19): ['(1795:99)', '(1796:99)', '(1801:99)', '(1803:99)', '(1805:99)', '(1808:99)', '(1809:99)', '(1810:99)', '(1811:99)', '(1813:100)', '(1814:100)', '(1815:100)', '(1818:100)', '(1820:100)', '(1822:100)', '(1824:100)', '(1826:100)', '(1829:100)', '(1830:100)']
Total instructions: 10, total introns: 8
----------------
r[0] = cos(r[0])
r[1] = r[1] - r[1]
r[0] = r[0] + i[16]
r[1] = r[1] / r[1]
r[1] = r[1] / r[0]
if r[0] < r[0]:
r[0] = ln(r[0])
r[1] = exp(r[1])
r[1] = cos(r[1])
r[1] = r[1] + r[0]
----------------
Total instructions (without introns): 2
----------------
r[0] = r[0] + i[16]
if r[0] < r[0]:
----------------

Code for program 2281 from generation 95 for action 0
Participate in the teams (18): ['(1795:99)', '(1796:99)', '(1801:99)', '(1803:99)', '(1805:99)', '(1808:99)', '(1809:99)', '(1810:99)', '(1811:99)', '(1814:100)', '(1815:100)', '(1818:100)', '(1820:100)', '(1822:100)', '(1824:100)', '(1827:100)', '(1829:100)', '(1830:100)']
Total instructions: 12, total introns: 4
----------------
r[1] = r[1] / r[1]
r[1] = r[1] / i[17]
r[0] = r[0] * r[0]
r[0] = r[0] + r[1]
r[0] = ln(r[0])
r[1] = r[1] / r[0]
r[1] = r[1] * i[3]
r[0] = r[0] / i[8]
if r[0] < r[5]:
r[0] = r[0] + i[16]
if r[0] < r[0]:
if r[1] >= r[0]:
----------------
Total instructions (without introns): 8
----------------
r[1] = r[1] / r[1]
r[1] = r[1] / i[17]
r[0] = r[0] * r[0]
r[0] = r[0] + r[1]
r[0] = r[0] / i[8]
if r[0] < r[5]:
r[0] = r[0] + i[16]
if r[0] < r[0]:
----------------

Code for program 2349 from generation 99 for action 0
Participate in the teams (5): ['(1795:99)', '(1804:99)', '(1815:100)', '(1821:100)', '(1825:100)']
Total instructions: 15, total introns: 10
----------------
r[0] = ln(r[0])
r[0] = cos(r[0])
r[0] = r[0] + r[0]
r[0] = ln(r[0])
r[0] = ln(r[0])
r[1] = exp(r[1])
if r[0] < r[1]:
r[1] = cos(r[1])
r[1] = ln(r[1])
r[0] = cos(r[0])
if r[0] < r[1]:
r[1] = r[1] + r[0]
r[0] = r[0] + r[1]
r[1] = r[1] - i[16]
r[0] = exp(r[0])
----------------
Total instructions (without introns): 5
----------------
r[0] = r[0] + r[0]
if r[0] < r[1]:
if r[0] < r[1]:
r[1] = r[1] + r[0]
r[0] = r[0] + r[1]
----------------
################