
CONFIG: {'task': 'classification', 'verbose': {'show_actions_distribution_per_generation': False}, 'classification_parameters': {'use_oversampling': True, 'dataset': 'thyroid'}, 'reinforcement_parameters': {'environment': 'tictactoe'}, 'advanced_training_parameters': {'extra_registers': 1, 'diversity': {'genotype_fitness_maintanance': False, 'genotype_configs': {'p_value': 0.1, 'k': 8}, 'fitness_sharing': False}, 'use_complex_functions': True}, 'training_parameters': {'team_size': {'max': 5}, 'program_size': {'max': 30, 'initial': 10, 'min': 2}, 'populations': {'teams': 30, 'points': 120, 'programs': 60}, 'generations_total': 100, 'mutation': {'program': {'change_action': 0.1, 'change_instruction': 0.9, 'add_instruction': 0.9, 'remove_instruction': 0.8}, 'team': {'add_program': 0.8, 'remove_program': 0.7}}, 'replacement_rate': {'points': 0.2, 'teams': 0.6}, 'runs_total': 2}}

################# Overall Best:
0 Run best program: 1795:99, f: 0.625, team size: 5, team members: [('(2474:98)', 0), ('(1395:55)', 1), ('(1935:77)', 2), ('(2461:97)', 2), ('(2512:99)', 2)]
TRAIN: acc: 0.625, mrecall: 0.625
TEST: acc: 0.32409, mrecall: 0.63782, recall: [ 1.          0.62146893  0.29200755]

Algorithm info:
Class Distributions (test dataset): defaultdict(<type 'int'>, {0: 73, 1: 177, 2: 3178}), for a total of 3428 samples
total samples (train): 3772
total samples (test): 3428
total_input_registers: 21
total_classes: 3

Acc per classes: [0.021295215869311553, 0.03208868144690782, 0.2707117852975496]
Confusion Matrix:
[[  73    0    0]
 [  45  110   22]
 [ 920 1330  928]]

Test DR per run: [0.63782, 0.59524]
Test DR, mean: 0.61653, std: 0.02129

recall_per_generation: [[0.917, 0.175, 0.371], [0.917, 0.175, 0.371], [0.917, 0.175, 0.371], [0.917, 0.175, 0.371], [0.917, 0.175, 0.371], [0.917, 0.18, 0.36], [0.917, 0.18, 0.36], [0.917, 0.141, 0.378], [0.917, 0.141, 0.378], [0.917, 0.141, 0.378], [0.876, 0.0, 0.834], [0.876, 0.0, 0.834], [0.876, 0.0, 0.834], [0.876, 0.0, 0.834], [0.876, 0.0, 0.834], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.917, 0.0, 0.68], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.876, 0.734, 0.0], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.931, 0.7, 0.34], [0.931, 0.7, 0.34], [0.904, 0.7, 0.342], [0.904, 0.7, 0.343], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.343], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.7, 0.342], [0.904, 0.683, 0.356], [0.904, 0.683, 0.356], [0.904, 0.683, 0.356], [0.904, 0.7, 0.344], [0.904, 0.689, 0.349], [0.904, 0.559, 0.504], [0.904, 0.559, 0.504], [0.904, 0.61, 0.578], [0.904, 0.61, 0.578], [0.904, 0.61, 0.578], [0.904, 0.61, 0.578], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.587, 0.656], [0.904, 0.672, 0.433], [0.904, 0.056, 0.763], [0.904, 0.587, 0.656], [0.904, 0.683, 0.362], [1.0, 0.598, 0.299], [0.917, 0.587, 0.363], [0.917, 0.587, 0.363], [0.917, 0.587, 0.371], [0.917, 0.587, 0.371], [0.917, 0.587, 0.371], [0.917, 0.587, 0.45], [1.0, 0.587, 0.282], [1.0, 0.587, 0.282], [1.0, 0.621, 0.292]]

avg_dr_per_generations: [0.403, 0.448, 0.448, 0.448, 0.453, 0.476, 0.476, 0.476, 0.476, 0.476, 0.562, 0.562, 0.562, 0.562, 0.577, 0.56, 0.56, 0.545, 0.56, 0.553, 0.538, 0.538, 0.538, 0.538, 0.538, 0.538, 0.538, 0.536, 0.553, 0.553, 0.541, 0.541, 0.597, 0.597, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.599, 0.603, 0.603, 0.599, 0.599, 0.612, 0.612, 0.612, 0.604, 0.604, 0.604, 0.604, 0.604, 0.604, 0.604, 0.604, 0.604, 0.604, 0.604, 0.603, 0.603, 0.603, 0.604, 0.603, 0.604, 0.604, 0.625, 0.646, 0.646, 0.646, 0.655, 0.655, 0.655, 0.655, 0.655, 0.655, 0.655, 0.655, 0.655, 0.632, 0.584, 0.655, 0.622, 0.613, 0.609, 0.609, 0.61, 0.61, 0.61, 0.623, 0.609, 0.609, 0.616]
Actions Distribution (last gen.): Counter({2: 34, 0: 19, 1: 7})
Finished execution, total elapsed time: 37.8385639191 secs
Elapsed times, mean: 18.9192819595, std: 1.54945111275
Code for team 1795 from generation 99, team size: 5
################

Code for program 1395 from generation 55 for action 1
Participate in the teams (30): ['(1795:99)', '(1796:99)', '(1798:99)', '(1803:99)', '(1805:99)', '(1806:99)', '(1807:99)', '(1808:99)', '(1809:99)', '(1810:99)', '(1811:99)', '(1812:99)', '(1813:100)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1818:100)', '(1819:100)', '(1820:100)', '(1821:100)', '(1822:100)', '(1823:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 11, total introns: 5
----------------
r[1] = exp(r[1])
r[0] = r[0] - r[0]
r[1] = cos(r[1])
r[0] = r[0] / i[0]
if r[0] >= r[18]:
if r[1] >= r[0]:
r[1] = ln(r[1])
r[0] = r[0] * i[4]
r[1] = r[1] + i[17]
r[0] = r[0] + i[9]
r[0] = r[0] / i[20]
----------------
Total instructions (without introns): 6
----------------
r[0] = r[0] - r[0]
r[0] = r[0] / i[0]
if r[0] >= r[18]:
r[0] = r[0] * i[4]
r[0] = r[0] + i[9]
r[0] = r[0] / i[20]
----------------

Code for program 1935 from generation 77 for action 2
Participate in the teams (16): ['(1795:99)', '(1798:99)', '(1803:99)', '(1806:99)', '(1807:99)', '(1808:99)', '(1809:99)', '(1811:99)', '(1812:99)', '(1815:100)', '(1817:100)', '(1818:100)', '(1820:100)', '(1822:100)', '(1829:100)', '(1830:100)']
Total instructions: 15, total introns: 8
----------------
r[1] = r[1] / i[8]
r[0] = ln(r[0])
r[1] = ln(r[1])
r[0] = ln(r[0])
r[1] = r[1] - r[1]
r[1] = cos(r[1])
r[0] = r[0] - r[1]
r[1] = exp(r[1])
r[0] = r[0] - i[18]
r[0] = r[0] / i[3]
r[1] = cos(r[1])
r[0] = r[0] - i[2]
r[0] = r[0] + i[3]
r[1] = r[1] * i[8]
r[1] = r[1] * i[16]
----------------
Total instructions (without introns): 7
----------------
r[1] = r[1] / i[8]
r[1] = r[1] - r[1]
r[0] = r[0] - r[1]
r[0] = r[0] - i[18]
r[0] = r[0] / i[3]
r[0] = r[0] - i[2]
r[0] = r[0] + i[3]
----------------

Code for program 2461 from generation 97 for action 2
Participate in the teams (6): ['(1795:99)', '(1796:99)', '(1813:100)', '(1824:100)', '(1825:100)', '(1828:100)']
Total instructions: 14, total introns: 7
----------------
r[1] = r[1] * i[17]
r[1] = r[1] / i[8]
r[0] = ln(r[0])
r[1] = ln(r[1])
r[0] = ln(r[0])
r[0] = r[0] - r[1]
r[1] = exp(r[1])
r[0] = r[0] - i[18]
r[1] = r[1] / i[20]
r[0] = r[0] * r[0]
r[0] = r[0] - r[0]
r[0] = r[0] / i[3]
r[1] = r[1] * i[8]
r[1] = r[1] * i[16]
----------------
Total instructions (without introns): 7
----------------
r[1] = r[1] * i[17]
r[1] = r[1] / i[8]
r[0] = r[0] - r[1]
r[0] = r[0] - i[18]
r[0] = r[0] * r[0]
r[0] = r[0] - r[0]
r[0] = r[0] / i[3]
----------------

Code for program 2474 from generation 98 for action 0
Participate in the teams (9): ['(1795:99)', '(1796:99)', '(1813:100)', '(1815:100)', '(1821:100)', '(1822:100)', '(1824:100)', '(1825:100)', '(1828:100)']
Total instructions: 11, total introns: 6
----------------
r[0] = r[0] * r[0]
r[1] = r[1] + i[2]
r[1] = cos(r[1])
r[0] = r[0] / r[0]
r[1] = ln(r[1])
r[0] = exp(r[0])
r[1] = r[1] + i[4]
r[0] = ln(r[0])
r[0] = r[0] + r[1]
r[0] = cos(r[0])
r[0] = ln(r[0])
----------------
Total instructions (without introns): 5
----------------
r[0] = r[0] * r[0]
r[1] = r[1] + i[2]
r[0] = r[0] / r[0]
r[1] = r[1] + i[4]
r[0] = r[0] + r[1]
----------------

Code for program 2512 from generation 99 for action 2
Participate in the teams (5): ['(1795:99)', '(1810:99)', '(1815:100)', '(1816:100)', '(1822:100)']
Total instructions: 15, total introns: 5
----------------
r[1] = r[1] * i[5]
r[0] = ln(r[0])
r[1] = r[1] - r[0]
if r[0] < r[0]:
r[1] = r[1] * i[4]
r[0] = r[0] - r[1]
r[1] = exp(r[1])
r[0] = r[0] - i[18]
r[1] = ln(r[1])
r[0] = r[0] / i[3]
r[0] = r[0] - i[2]
r[0] = r[0] - i[8]
r[0] = r[0] * i[11]
r[1] = r[1] * i[9]
if r[1] >= r[1]:
----------------
Total instructions (without introns): 10
----------------
r[1] = r[1] * i[5]
r[1] = r[1] - r[0]
if r[0] < r[0]:
r[1] = r[1] * i[4]
r[0] = r[0] - r[1]
r[0] = r[0] - i[18]
r[0] = r[0] / i[3]
r[0] = r[0] - i[2]
r[0] = r[0] - i[8]
r[0] = r[0] * i[11]
----------------
################