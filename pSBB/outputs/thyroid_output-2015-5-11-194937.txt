
CONFIG: {'task': 'classification', 'verbose': {'show_actions_distribution_per_generation': False}, 'classification_parameters': {'use_oversampling': True, 'dataset': 'thyroid'}, 'reinforcement_parameters': {'environment': 'tictactoe'}, 'advanced_training_parameters': {'extra_registers': 1, 'diversity': {'genotype_fitness_maintanance': False, 'genotype_configs': {'p_value': 0.1, 'k': 8}, 'fitness_sharing': False}, 'use_complex_functions': True}, 'training_parameters': {'team_size': {'max': 5}, 'program_size': {'max': 30, 'initial': 10, 'min': 2}, 'populations': {'teams': 30, 'points': 120, 'programs': 60}, 'generations_total': 100, 'mutation': {'program': {'change_action': 0.1, 'change_instruction': 0.9, 'add_instruction': 0.9, 'remove_instruction': 0.8}, 'team': {'add_program': 0.8, 'remove_program': 0.7}}, 'replacement_rate': {'points': 0.2, 'teams': 0.6}, 'runs_total': 2}}

################# Overall Best:
1 Run best program: 1778:98, f: 0.79166, team size: 4, team members: [('(2136:82)', 0), ('(999:38)', 1), ('(2530:98)', 1), ('(2345:90)', 2)]
TRAIN: acc: 0.79166, mrecall: 0.79166
TEST: acc: 0.87631, mrecall: 0.79182, recall: [ 0.91780822  0.56497175  0.89269981]

Algorithm info:
Class Distributions (test dataset): defaultdict(<type 'int'>, {0: 73, 1: 177, 2: 3178}), for a total of 3428 samples
total samples (train): 3772
total samples (test): 3428
total_input_registers: 21
total_classes: 3

Acc per classes: [0.019544924154025672, 0.029171528588098017, 0.8275962660443408]
Confusion Matrix:
[[  67    6    0]
 [  77  100    0]
 [  60  281 2837]]

Test DR per run: [0.64768, 0.79182]
Test DR, mean: 0.71975, std: 0.07207

recall_per_generation: [[0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.068, 0.937, 0.0], [0.972, 0.022, 0.0], [1.0, 0.0, 0.0], [0.794, 0.158, 0.0], [0.794, 0.158, 0.0], [0.794, 0.158, 0.0], [0.0, 0.135, 0.936], [0.972, 0.022, 0.0], [0.0, 0.135, 0.936], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.0], [0.972, 0.022, 0.008], [0.972, 0.022, 0.008], [0.972, 0.022, 0.0], [0.972, 0.022, 0.008], [0.972, 0.022, 0.008], [0.972, 0.022, 0.008], [0.972, 0.022, 0.029], [0.972, 0.022, 0.029], [0.972, 0.022, 0.008], [0.972, 0.022, 0.008], [0.0, 0.0, 1.0], [0.0, 0.135, 0.936], [0.643, 0.022, 0.473], [0.643, 0.022, 0.473], [0.712, 0.022, 0.409], [0.0, 0.135, 0.936], [0.794, 0.519, 0.0], [0.972, 0.418, 0.0], [0.972, 0.418, 0.0], [0.972, 0.418, 0.008], [0.794, 0.514, 0.02], [0.958, 0.435, 0.008], [0.657, 0.988, 0.0], [0.78, 0.96, 0.021], [0.78, 0.96, 0.021], [0.78, 0.96, 0.021], [0.78, 0.96, 0.021], [0.78, 0.988, 0.0], [0.78, 0.988, 0.0], [0.78, 0.988, 0.0], [0.78, 0.988, 0.0], [0.78, 0.988, 0.0], [0.78, 0.988, 0.0], [0.767, 0.988, 0.066], [0.767, 0.988, 0.066], [0.767, 0.988, 0.066], [0.78, 0.988, 0.0], [0.767, 0.988, 0.066], [0.726, 0.988, 0.146], [0.726, 0.988, 0.146], [0.726, 0.988, 0.146], [0.958, 0.418, 0.066], [0.958, 0.418, 0.066], [0.958, 0.418, 0.066], [0.876, 0.627, 0.066], [0.767, 0.056, 0.947], [0.767, 0.056, 0.947], [0.78, 0.056, 0.888], [0.767, 0.056, 0.947], [0.767, 0.056, 0.947], [0.931, 0.384, 0.259], [0.89, 0.384, 0.72], [0.931, 0.384, 0.259], [0.931, 0.384, 0.259], [0.931, 0.384, 0.259], [0.931, 0.384, 0.259], [0.876, 0.474, 0.259], [0.876, 0.474, 0.259], [0.917, 0.384, 0.295], [0.931, 0.378, 0.568], [0.931, 0.378, 0.568], [0.931, 0.378, 0.568], [0.931, 0.378, 0.568], [0.972, 0.378, 0.953], [0.972, 0.378, 0.953], [0.972, 0.378, 0.953], [0.972, 0.378, 0.953], [0.972, 0.378, 0.953], [0.972, 0.378, 0.953], [0.972, 0.418, 0.927], [0.972, 0.418, 0.927], [0.972, 0.418, 0.927], [0.972, 0.418, 0.927], [0.972, 0.418, 0.927], [0.972, 0.418, 0.927], [0.972, 0.418, 0.927], [0.917, 0.564, 0.892], [0.917, 0.564, 0.892]]

avg_dr_per_generations: [0.442, 0.442, 0.448, 0.487, 0.487, 0.489, 0.487, 0.487, 0.48, 0.482, 0.482, 0.501, 0.489, 0.499, 0.478, 0.456, 0.456, 0.456, 0.456, 0.484, 0.489, 0.489, 0.49, 0.49, 0.489, 0.489, 0.489, 0.489, 0.492, 0.492, 0.489, 0.489, 0.488, 0.5, 0.511, 0.511, 0.512, 0.5, 0.534, 0.547, 0.547, 0.556, 0.544, 0.557, 0.597, 0.617, 0.617, 0.617, 0.617, 0.618, 0.618, 0.611, 0.618, 0.618, 0.618, 0.627, 0.627, 0.627, 0.618, 0.627, 0.633, 0.633, 0.633, 0.563, 0.563, 0.563, 0.585, 0.618, 0.618, 0.61, 0.618, 0.618, 0.585, 0.655, 0.585, 0.585, 0.585, 0.585, 0.591, 0.591, 0.589, 0.636, 0.636, 0.636, 0.636, 0.707, 0.706, 0.707, 0.707, 0.707, 0.707, 0.709, 0.709, 0.709, 0.709, 0.709, 0.71, 0.709, 0.719, 0.719]
Actions Distribution (last gen.): Counter({2: 25, 1: 21, 0: 14})
Finished execution, total elapsed time: 35.9039881229 secs
Elapsed times, mean: 17.9519940615, std: 0.670162081718
Code for team 1778 from generation 98, team size: 4
################

Code for program 999 from generation 38 for action 1
Participate in the teams (28): ['(1778:98)', '(1794:98)', '(1795:99)', '(1796:99)', '(1797:99)', '(1799:99)', '(1802:99)', '(1803:99)', '(1804:99)', '(1807:99)', '(1809:99)', '(1810:99)', '(1813:100)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1818:100)', '(1820:100)', '(1821:100)', '(1822:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 10, total introns: 2
----------------
r[1] = r[1] * r[0]
if r[0] < r[10]:
r[0] = r[0] * i[1]
r[0] = r[0] + i[17]
r[0] = r[0] - i[18]
if r[0] < r[8]:
if r[0] >= r[1]:
r[0] = r[0] + i[6]
r[0] = exp(r[0])
r[0] = r[0] * i[4]
----------------
Total instructions (without introns): 8
----------------
if r[0] < r[10]:
r[0] = r[0] * i[1]
r[0] = r[0] + i[17]
r[0] = r[0] - i[18]
if r[0] < r[8]:
if r[0] >= r[1]:
r[0] = r[0] + i[6]
r[0] = r[0] * i[4]
----------------

Code for program 2136 from generation 82 for action 0
Participate in the teams (27): ['(1778:98)', '(1794:98)', '(1795:99)', '(1796:99)', '(1797:99)', '(1799:99)', '(1802:99)', '(1803:99)', '(1804:99)', '(1807:99)', '(1810:99)', '(1814:100)', '(1815:100)', '(1816:100)', '(1817:100)', '(1818:100)', '(1819:100)', '(1820:100)', '(1821:100)', '(1823:100)', '(1824:100)', '(1825:100)', '(1826:100)', '(1827:100)', '(1828:100)', '(1829:100)', '(1830:100)']
Total instructions: 11, total introns: 11
----------------
r[0] = ln(r[0])
r[1] = r[1] + r[1]
r[0] = exp(r[0])
r[1] = r[1] + i[15]
r[1] = ln(r[1])
r[1] = ln(r[1])
r[1] = r[1] / r[1]
r[1] = r[1] / i[16]
r[1] = r[1] * r[1]
if r[1] < r[2]:
r[1] = r[1] * i[10]
----------------
Total instructions (without introns): 0
----------------
----------------

Code for program 2345 from generation 90 for action 2
Participate in the teams (14): ['(1778:98)', '(1794:98)', '(1796:99)', '(1803:99)', '(1809:99)', '(1814:100)', '(1815:100)', '(1817:100)', '(1819:100)', '(1820:100)', '(1823:100)', '(1824:100)', '(1826:100)', '(1827:100)']
Total instructions: 9, total introns: 5
----------------
r[1] = r[1] + i[16]
r[0] = ln(r[0])
if r[0] >= r[10]:
r[0] = r[0] + i[11]
r[0] = cos(r[0])
r[0] = ln(r[0])
r[0] = r[0] - r[1]
r[1] = r[1] / r[1]
r[0] = ln(r[0])
----------------
Total instructions (without introns): 4
----------------
r[1] = r[1] + i[16]
if r[0] >= r[10]:
r[0] = r[0] + i[11]
r[0] = r[0] - r[1]
----------------

Code for program 2530 from generation 98 for action 1
Participate in the teams (3): ['(1778:98)', '(1819:100)', '(1823:100)']
Total instructions: 11, total introns: 6
----------------
r[1] = r[1] * r[0]
r[1] = r[1] / i[9]
r[0] = r[0] + i[11]
r[0] = ln(r[0])
r[0] = r[0] * i[1]
if r[0] < r[8]:
r[0] = cos(r[0])
r[0] = r[0] - i[17]
r[0] = r[0] * i[15]
r[1] = cos(r[1])
r[1] = r[1] / i[2]
----------------
Total instructions (without introns): 5
----------------
r[0] = r[0] + i[11]
r[0] = r[0] * i[1]
if r[0] < r[8]:
r[0] = r[0] - i[17]
r[0] = r[0] * i[15]
----------------
################